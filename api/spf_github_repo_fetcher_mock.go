// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package api

import (
	"github.com/google/go-github/github"
	"sync"
)

var (
	lockSPFGithubRepoFetcherMockFetch sync.RWMutex
)

// SPFGithubRepoFetcherMock is a mock implementation of SPFGithubRepoFetcher.
//
//     func TestSomethingThatUsesSPFGithubRepoFetcher(t *testing.T) {
//
//         // make and configure a mocked SPFGithubRepoFetcher
//         mockedSPFGithubRepoFetcher := &SPFGithubRepoFetcherMock{
//             FetchFunc: func() ([]*github.Repository, error) {
// 	               panic("TODO: mock out the Fetch method")
//             },
//         }
//
//         // TODO: use mockedSPFGithubRepoFetcher in code that requires SPFGithubRepoFetcher
//         //       and then make assertions.
//
//     }
type SPFGithubRepoFetcherMock struct {
	// FetchFunc mocks the Fetch method.
	FetchFunc func() ([]*github.Repository, error)

	// calls tracks calls to the methods.
	calls struct {
		// Fetch holds details about calls to the Fetch method.
		Fetch []struct {
		}
	}
}

// Fetch calls FetchFunc.
func (mock *SPFGithubRepoFetcherMock) Fetch() ([]*github.Repository, error) {
	if mock.FetchFunc == nil {
		panic("moq: SPFGithubRepoFetcherMock.FetchFunc is nil but SPFGithubRepoFetcher.Fetch was just called")
	}
	callInfo := struct {
	}{}
	lockSPFGithubRepoFetcherMockFetch.Lock()
	mock.calls.Fetch = append(mock.calls.Fetch, callInfo)
	lockSPFGithubRepoFetcherMockFetch.Unlock()
	return mock.FetchFunc()
}

// FetchCalls gets all the calls that were made to Fetch.
// Check the length with:
//     len(mockedSPFGithubRepoFetcher.FetchCalls())
func (mock *SPFGithubRepoFetcherMock) FetchCalls() []struct {
} {
	var calls []struct {
	}
	lockSPFGithubRepoFetcherMockFetch.RLock()
	calls = mock.calls.Fetch
	lockSPFGithubRepoFetcherMockFetch.RUnlock()
	return calls
}
